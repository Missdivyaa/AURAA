// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  familyMembers FamilyMember[]
  healthReports HealthReport[]
  appointments  Appointment[]
  medications   Medication[]
  reminders     Reminder[]
  aiInsights    AIInsight[]

  @@map("users")
}

model FamilyMember {
  id                String   @id @default(cuid())
  userId            String
  name              String
  email             String?
  phone             String?
  dob               DateTime
  gender            String
  relationship      String
  bloodType         String?
  height            Float?
  weight            Float?
  conditions        String[]
  allergies         String[]
  emergencyContacts Json?
  insurance         Json?
  doctor            Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthReports HealthReport[]
  appointments  Appointment[]
  medications   Medication[]
  reminders     Reminder[]
  aiInsights    AIInsight[]

  @@map("family_members")
}

model HealthReport {
  id            String   @id @default(cuid())
  userId        String
  memberId      String?
  fileName      String
  fileType      String
  fileUrl       String
  fileSize      Int?
  extractedText String?
  analysis      Json?
  status        String   @default("uploaded") // uploaded, processing, analyzed, error
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  member FamilyMember?  @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("health_reports")
}

model Appointment {
  id          String   @id @default(cuid())
  userId      String
  memberId    String?
  doctorName  String
  specialty   String
  hospital    String?
  date        DateTime
  time        String
  notes       String?
  status      String   @default("scheduled") // scheduled, completed, cancelled, rescheduled
  reminderSent Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  member FamilyMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

model Medication {
  id          String   @id @default(cuid())
  userId      String
  memberId    String?
  name        String
  dosage      String
  frequency   String
  startDate   DateTime
  endDate     DateTime?
  sideEffects String[]
  reminders   Json?
  status      String   @default("active") // active, completed, stopped
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  member FamilyMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("medications")
}

model Reminder {
  id          String   @id @default(cuid())
  userId      String
  memberId    String?
  title       String
  description String?
  type        String   // medication, appointment, checkup, exercise, measurement, other
  date        DateTime
  time        String
  frequency   String   // once, daily, weekly, monthly
  priority    String   @default("medium") // low, medium, high
  status      String   @default("active") // active, completed, cancelled
  notifications Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  member FamilyMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("reminders")
}

model AIInsight {
  id          String   @id @default(cuid())
  userId      String
  memberId    String?
  type        String   // health_trend, risk_assessment, recommendation, alert
  title       String
  description String
  severity    String   // low, medium, high
  category    String   // cardiovascular, diabetes, general, medication
  data        Json?
  actionItems Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  member FamilyMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("ai_insights")
}

model SymptomAnalysis {
  id          String   @id @default(cuid())
  userId      String
  memberId    String?
  symptoms    Json
  analysis    Json
  conditions  Json
  urgencyLevel String
  createdAt   DateTime @default(now())

  @@map("symptom_analyses")
}